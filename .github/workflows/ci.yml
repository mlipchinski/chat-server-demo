name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}
  COMMIT_SHA: ${{ github.sha }}
  # service names -> image names (matching your docker-compose structure)
  AUTH_IMAGE: ghcr.io/${{ github.repository_owner }}/auth
  MESSAGES_IMAGE: ghcr.io/${{ github.repository_owner }}/messages
  NOTIFICATIONS_IMAGE: ghcr.io/${{ github.repository_owner }}/notifications
  NGINX_IMAGE: ghcr.io/${{ github.repository_owner }}/nginx

permissions:
  contents: read
  packages: write

jobs:
  lint-and-test:
    name: Lint & unit tests (${{ matrix.service }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: [ "user-service", "chat-service", "notification-service" ]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: ${{ matrix.service }}/package-lock.json

      - name: Install
        working-directory: ${{ matrix.service }}
        run: npm ci

      - name: Lint (if present)
        working-directory: ${{ matrix.service }}
        run: |
          if npm run | grep -q "^  lint"; then
            npm run lint
          else
            echo "No lint script found for ${{ matrix.service }}"
          fi

      - name: Test (if present)
        working-directory: ${{ matrix.service }}
        run: |
          if npm run | grep -q "^  test"; then
            npm test --if-present
          else
            echo "No test script found for ${{ matrix.service }}"
          fi

  build-and-push:
    name: Build & push images
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build/push auth service (user-service)
      - name: Build & push auth
        uses: docker/build-push-action@v6
        with:
          context: ./user-service
          file: ./user-service/Dockerfile
          push: true
          tags: |
            ${{ env.AUTH_IMAGE }}:sha-${{ env.COMMIT_SHA }}
            ${{ env.AUTH_IMAGE }}:${{ github.ref_name == 'main' && 'latest' || 'pr' }}
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha,scope=auth
          cache-to: type=gha,mode=max,scope=auth

      # Build/push messages service (chat-service)
      - name: Build & push messages
        uses: docker/build-push-action@v6
        with:
          context: ./chat-service
          file: ./chat-service/Dockerfile
          push: true
          tags: |
            ${{ env.MESSAGES_IMAGE }}:sha-${{ env.COMMIT_SHA }}
            ${{ env.MESSAGES_IMAGE }}:${{ github.ref_name == 'main' && 'latest' || 'pr' }}
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha,scope=messages
          cache-to: type=gha,mode=max,scope=messages

      # Build/push notifications service (notification-service)
      - name: Build & push notifications
        uses: docker/build-push-action@v6
        with:
          context: ./notification-service
          file: ./notification-service/Dockerfile
          push: true
          tags: |
            ${{ env.NOTIFICATIONS_IMAGE }}:sha-${{ env.COMMIT_SHA }}
            ${{ env.NOTIFICATIONS_IMAGE }}:${{ github.ref_name == 'main' && 'latest' || 'pr' }}
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha,scope=notifications
          cache-to: type=gha,mode=max,scope=notifications

      # Build/push nginx
      - name: Build & push nginx
        uses: docker/build-push-action@v6
        with:
          context: ./nginx
          file: ./nginx/Dockerfile
          push: true
          tags: |
            ${{ env.NGINX_IMAGE }}:sha-${{ env.COMMIT_SHA }}
            ${{ env.NGINX_IMAGE }}:${{ github.ref_name == 'main' && 'latest' || 'pr' }}
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha,scope=nginx
          cache-to: type=gha,mode=max,scope=nginx

  integration:
    name: Integration smoke tests
    runs-on: ubuntu-latest
    needs: build-and-push
    env:
      # Point compose to use just-built images by tag
      AUTH_IMAGE: ghcr.io/${{ github.repository_owner }}/auth:sha-${{ github.sha }}
      MESSAGES_IMAGE: ghcr.io/${{ github.repository_owner }}/messages:sha-${{ github.sha }}
      NOTIFICATIONS_IMAGE: ghcr.io/${{ github.repository_owner }}/notifications:sha-${{ github.sha }}
      NGINX_IMAGE: ghcr.io/${{ github.repository_owner }}/nginx:sha-${{ github.sha }}
      # Environment variables for dependencies
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_DB: app
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: pass
      MAILPIT_WEB_PORT: "38025"
      MAILPIT_SMTP_PORT: "31025"
      MONGO_PORT: "37017"
      RABBITMQ_PORT: "35672"
      RABBITMQ_MANAGEMENT_PORT: "35673"
      USER_SERVICE_PORT: "38081"
      MESSAGES_SERVICE_PORT: "38082"
      NOTIFICATIONS_SERVICE_PORT: "38083"
      EMAIL_FROM: noreply@example.com
      PROMETHEUS_PORT: "9090"
      CADVISOR_PORT: "8089"
      GRAFANA_PORT: "3000"
      GRAFANA_ADMIN_USER: "admin"
      GRAFANA_ADMIN_PASS: "admin"
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create CI override compose
        run: |
          cat > docker-compose.ci.override.yml <<'YAML'
          services:
            # Fix mongo healthcheck (auth required)
            mongo:
              healthcheck:
                test: ["CMD-SHELL", "mongosh --quiet --username $${MONGO_INITDB_ROOT_USERNAME} --password $${MONGO_INITDB_ROOT_PASSWORD} --authenticationDatabase admin --eval 'db.adminCommand({ ping: 1 }).ok' | grep 1"]
                interval: 5s
                timeout: 5s
                retries: 30
            
            # Use built images instead of building
            auth:
              image: ${AUTH_IMAGE}
              build: {}
              depends_on:
                mongo:
                  condition: service_healthy
                rabbitmq:
                  condition: service_healthy
            
            messages:
              image: ${MESSAGES_IMAGE}
              build: {}
              depends_on:
                mongo:
                  condition: service_healthy
                rabbitmq:
                  condition: service_healthy
            
            notifications:
              image: ${NOTIFICATIONS_IMAGE}
              build: {}
              depends_on:
                mongo:
                  condition: service_healthy
                rabbitmq:
                  condition: service_healthy
                mailpit:
                  condition: service_started
            
            nginx:
              image: ${NGINX_IMAGE}
              build: {}
            
            # Skip monitoring services in CI for speed
            prometheus:
              profiles: ["monitoring"]
            
            grafana:
              profiles: ["monitoring"]
            
            cadvisor:
              profiles: ["monitoring"]
          YAML

      - name: Start stack
        run: docker compose -f docker-compose.yml -f docker-compose.ci.override.yml up -d --wait

      - name: Wait for services & smoke test
        run: |
          timeout() { perl -e 'alarm shift; exec @ARGV' "$@"; }
          try_curl() { timeout 10 curl -fsS "$1" || return 1; }
          
          echo "Waiting for /health endpoints to come up..."
          for i in $(seq 1 60); do
            OK=1
            echo "Attempt $i/60..."
            try_curl "http://localhost:${USER_SERVICE_PORT}/health" || { echo "Auth service health check failed"; OK=0; }
            try_curl "http://localhost:${MESSAGES_SERVICE_PORT}/health" || { echo "Messages service health check failed"; OK=0; }
            try_curl "http://localhost:${NOTIFICATIONS_SERVICE_PORT}/health" || { echo "Notifications service health check failed"; OK=0; }
            
            if [ $OK -eq 1 ]; then
              echo "All health checks passed!"
              break
            fi
            
            if [ $i -eq 60 ]; then
              echo "Health checks failed after 60 attempts. Showing logs:"
              docker compose -f docker-compose.yml -f docker-compose.ci.override.yml logs --no-log-prefix
              exit 1
            fi
            
            sleep 5
          done
          
          echo "Running additional smoke tests..."
          curl -fsS "http://localhost:${USER_SERVICE_PORT}/health" && echo "✓ Auth health check passed"
          curl -fsS "http://localhost:${MESSAGES_SERVICE_PORT}/health" && echo "✓ Messages health check passed"
          curl -fsS "http://localhost:${NOTIFICATIONS_SERVICE_PORT}/health" && echo "✓ Notifications health check passed"
          
          # Test metrics endpoint if available
          curl -fsS "http://localhost:${USER_SERVICE_PORT}/metrics" | head -n 10 || echo "No metrics endpoint available"

      - name: Show service logs on failure
        if: failure()
        run: |
          echo "=== Container status ==="
          docker compose -f docker-compose.yml -f docker-compose.ci.override.yml ps
          echo "=== Service logs ==="
          docker compose -f docker-compose.yml -f docker-compose.ci.override.yml logs --no-log-prefix

      - name: Teardown
        if: always()
        run: docker compose -f docker-compose.yml -f docker-compose.ci.override.yml down -v

  # Container vulnerability scan (Trivy) - Fixed to scan each image separately
  trivy-scan:
    name: Security scan (${{ matrix.image }})
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: build-and-push
    strategy:
      matrix:
        image: [
          "auth",
          "messages", 
          "notifications",
          "nginx"
        ]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}:sha-${{ github.sha }}
          format: 'sarif'
          output: 'trivy-${{ matrix.image }}-results.sarif'
          exit-code: '0'   # don't fail build on PRs; can tighten later
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.image }}-results.sarif'